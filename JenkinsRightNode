
pipeline {
    parameters {
        booleanParam(name: 'isJAVA', defaultValue: true, description: 'Execute Java')
        booleanParam(name: 'isCOBOL', defaultValue: true, description: 'Execute Cobol')
        booleanParam(name: 'isCUCUMBER', defaultValue: true, description: 'Execute Cucumber')
        booleanParam(name: 'isSONAR', defaultValue: true, description: 'Execute Sonar')
    }

    environment {
        TAGSX = ""
    }

    agent { label 'right' }

    stages {
        stage('Check Environment') {
            steps {
                script {
                 
                    TAGSX = ""

                    if(params.isJAVA.toBoolean()) {
                        TAGSX = 'java' 
                              
                    } 

                    if (params.isCOBOL.toBoolean()) {
                        if (TAGSX){
                            TAGSX = TAGSX + ',cobol'
                        }else{
                            TAGSX = 'cobol'
                        }
                    }

                    if (params.isCUCUMBER.toBoolean()) {
                         if (TAGSX){
                            TAGSX = TAGSX + ',cucumber'
                        }else{
                            TAGSX = 'cucumber'
                        }
                    }

                    if (params.isSONAR.toBoolean()) {
                         if (TAGSX){
                            TAGSX = TAGSX + ',sonar'
                        }else{
                            TAGSX = 'sonar'
                        }
                    }
                    
                    if (TAGSX){
                        TAGSX = '-t= "' + TAGSX + '"'
                    }
                 
                }
                
                sh "ansible-playbook ansible/check_playbook.yml -i l -b --become-user root $TAGSX"             
            }
        }

         stage('Unit Testing') {
             steps {
                 echo 'Compile unit testing framework'
                 echo 'Unit test'
                 sh './compile ZUTZCPC'
                 echo 'Run test suite calculator'
                 sh './run-ut CALCULATOR2C CALCULATOR2 CALCULATOR2T'
             }
         }
         stage('SonarCloud Analysis') {            
             environment {
                 scannerHome = tool 'SonarCubeScanner'
             }            
             steps {
                 withSonarQubeEnv('sonar') {
                     sh "${scannerHome}/bin/sonar-scanner"
                 }               
             }
         }
        stage('Functional Testing Cucumber') {
            steps {
                sh 'cd src/main/cobol; cobc -free -x -o calculator2-exe CALCULATOR2.CBL; ls -al; cp calculator2-exe /tmp; ls /tmp;'
                checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/diana-estrada/hellocucumber.git']]]
                echo 'Buid the calculator binary'
                sh 'chmod 777 /tmp/calculator2-exe; cp /tmp/calculator2-exe .; ls -al; pwd; mvn clean test; pwd'
            }
        }
        
    }
    
}
